[["/home/project/components/AuthForm.tsx","'use client'\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { useRouter } from 'next/navigation';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/components/ui/use-toast';\n\nconst schema = z.object({\n  email: z.string().email({ message: 'Invalid email address' }),\n  password: z.string().min(6, { message: 'Password must be at least 6 characters' }),\n});\n\ntype FormData = z.infer<typeof schema>;\n\nexport default function AuthForm() {\n  const [isLogin, setIsLogin] = useState(true);\n  const { register, handleSubmit, formState: { errors } } = useForm<FormData>({\n    resolver: zodResolver(schema),\n  });\n  const router = useRouter();\n  const { toast } = useToast();\n\n  const onSubmit = async (data: FormData) => {\n    try {\n      if (isLogin) {\n        await signInWithEmailAndPassword(auth, data.email, data.password);\n      } else {\n        await createUserWithEmailAndPassword(auth, data.email, data.password);\n      }\n      router.push('/dashboard');\n    } catch (error: any) {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4 max-w-md mx-auto\">\n      <div>\n        <Label htmlFor=\"email\">Email</Label>\n        <Input id=\"email\" type=\"email\" {...register('email')} />\n        {errors.email && <p className=\"text-red-500 text-sm mt-1\">{errors.email.message}</p>}\n      </div>\n      <div>\n        <Label htmlFor=\"password\">Password</Label>\n        <Input id=\"password\" type=\"password\" {...register('password')} />\n        {errors.password && <p className=\"text-red-500 text-sm mt-1\">{errors.password.message}</p>}\n      </div>\n      <Button type=\"submit\" className=\"w-full\">{isLogin ? 'Log In' : 'Sign Up'}</Button>\n      <p className=\"text-center\">\n        {isLogin ? \"Don't have an account? \" : \"Already have an account? \"}\n        <Button variant=\"link\" type=\"button\" onClick={() => setIsLogin(!isLogin)}>\n          {isLogin ? 'Sign Up' : 'Log In'}\n        </Button>\n      </p>\n    </form>\n  );\n}"]]